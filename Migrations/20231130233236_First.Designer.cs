// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PmsApi.DataContexts;

#nullable disable

namespace PmsApi.Migrations
{
    [DbContext(typeof(PmsContext))]
    [Migration("20231130233236_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("PmsApi.Models.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("PriorityId")
                        .HasName("PRIMARY");

                    b.HasIndex("PriorityName")
                        .IsUnique();

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            PriorityId = 1,
                            PriorityName = "Alta"
                        },
                        new
                        {
                            PriorityId = 2,
                            PriorityName = "Media"
                        },
                        new
                        {
                            PriorityId = 3,
                            PriorityName = "Bassa"
                        },
                        new
                        {
                            PriorityId = 4,
                            PriorityName = "Urgente"
                        });
                });

            modelBuilder.Entity("PmsApi.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("EndDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int?>("ManagerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly?>("StartDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.HasKey("ProjectId")
                        .HasName("PRIMARY");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProjectName")
                        .IsUnique();

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CategoryId = 1,
                            Description = "Descrizione del Progetto Alfa",
                            EndDate = new DateOnly(2021, 6, 30),
                            ManagerId = 1,
                            ProjectName = "Progetto Alfa",
                            StartDate = new DateOnly(2021, 1, 1)
                        },
                        new
                        {
                            ProjectId = 2,
                            CategoryId = 2,
                            Description = "Descrizione del Progetto Beta",
                            EndDate = new DateOnly(2021, 12, 31),
                            ManagerId = 2,
                            ProjectName = "Progetto Beta",
                            StartDate = new DateOnly(2021, 7, 1)
                        },
                        new
                        {
                            ProjectId = 3,
                            CategoryId = 3,
                            Description = "Descrizione del Progetto Gamma",
                            EndDate = new DateOnly(2022, 6, 30),
                            ManagerId = 3,
                            ProjectName = "Progetto Gamma",
                            StartDate = new DateOnly(2022, 1, 1)
                        },
                        new
                        {
                            ProjectId = 4,
                            CategoryId = 4,
                            Description = "Descrizione del Progetto Delta",
                            EndDate = new DateOnly(2022, 12, 31),
                            ManagerId = 4,
                            ProjectName = "Progetto Delta",
                            StartDate = new DateOnly(2022, 7, 1)
                        },
                        new
                        {
                            ProjectId = 5,
                            CategoryId = 5,
                            Description = "Descrizione del Progetto Epsilon",
                            EndDate = new DateOnly(2023, 6, 30),
                            ManagerId = 5,
                            ProjectName = "Progetto Epsilon",
                            StartDate = new DateOnly(2023, 1, 1)
                        },
                        new
                        {
                            ProjectId = 6,
                            CategoryId = 6,
                            Description = "Descrizione del Progetto Zeta",
                            EndDate = new DateOnly(2023, 12, 31),
                            ManagerId = 5,
                            ProjectName = "Progetto Zeta",
                            StartDate = new DateOnly(2023, 7, 1)
                        },
                        new
                        {
                            ProjectId = 7,
                            CategoryId = 7,
                            Description = "Descrizione del Progetto Eta",
                            EndDate = new DateOnly(2024, 6, 30),
                            ManagerId = 4,
                            ProjectName = "Progetto Eta",
                            StartDate = new DateOnly(2024, 1, 1)
                        },
                        new
                        {
                            ProjectId = 8,
                            CategoryId = 8,
                            Description = "Descrizione del Progetto Theta",
                            EndDate = new DateOnly(2024, 12, 31),
                            ManagerId = 3,
                            ProjectName = "Progetto Theta",
                            StartDate = new DateOnly(2024, 7, 1)
                        },
                        new
                        {
                            ProjectId = 9,
                            CategoryId = 9,
                            Description = "Descrizione del Progetto Iota",
                            EndDate = new DateOnly(2025, 6, 30),
                            ManagerId = 5,
                            ProjectName = "Progetto Iota",
                            StartDate = new DateOnly(2025, 1, 1)
                        },
                        new
                        {
                            ProjectId = 10,
                            CategoryId = 10,
                            Description = "Descrizione del Progetto Kappa",
                            EndDate = new DateOnly(2025, 12, 31),
                            ManagerId = 4,
                            ProjectName = "Progetto Kappa",
                            StartDate = new DateOnly(2025, 7, 1)
                        });
                });

            modelBuilder.Entity("PmsApi.Models.ProjectCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ProjectCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Software Development"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Web Development"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Database Systems"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "System Integration"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Testing"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Maintenance"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Research and Development"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "IT Support"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Marketing Campaigns"
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Product Launch"
                        },
                        new
                        {
                            CategoryId = 11,
                            CategoryName = "Event Management"
                        },
                        new
                        {
                            CategoryId = 12,
                            CategoryName = "Content Creation"
                        },
                        new
                        {
                            CategoryId = 13,
                            CategoryName = "Social Media Management"
                        },
                        new
                        {
                            CategoryId = 14,
                            CategoryName = "Customer Relations"
                        },
                        new
                        {
                            CategoryId = 15,
                            CategoryName = "Sales Strategies"
                        },
                        new
                        {
                            CategoryId = 16,
                            CategoryName = "Market Research"
                        },
                        new
                        {
                            CategoryId = 17,
                            CategoryName = "Financial Planning"
                        },
                        new
                        {
                            CategoryId = 18,
                            CategoryName = "Budget Management"
                        },
                        new
                        {
                            CategoryId = 19,
                            CategoryName = "Legal Compliance"
                        },
                        new
                        {
                            CategoryId = 20,
                            CategoryName = "Environmental Projects"
                        });
                });

            modelBuilder.Entity("PmsApi.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Developer"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Designer"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleName = "Tester"
                        },
                        new
                        {
                            RoleId = 6,
                            RoleName = "HR"
                        },
                        new
                        {
                            RoleId = 7,
                            RoleName = "Sales"
                        },
                        new
                        {
                            RoleId = 8,
                            RoleName = "Marketing"
                        },
                        new
                        {
                            RoleId = 9,
                            RoleName = "Support"
                        },
                        new
                        {
                            RoleId = 10,
                            RoleName = "Customer Service"
                        },
                        new
                        {
                            RoleId = 11,
                            RoleName = "Finance"
                        },
                        new
                        {
                            RoleId = 12,
                            RoleName = "Legal"
                        },
                        new
                        {
                            RoleId = 13,
                            RoleName = "Public Relations"
                        },
                        new
                        {
                            RoleId = 14,
                            RoleName = "Operations"
                        },
                        new
                        {
                            RoleId = 15,
                            RoleName = "IT"
                        },
                        new
                        {
                            RoleId = 16,
                            RoleName = "Product Manager"
                        },
                        new
                        {
                            RoleId = 17,
                            RoleName = "Data Analyst"
                        },
                        new
                        {
                            RoleId = 18,
                            RoleName = "Business Analyst"
                        },
                        new
                        {
                            RoleId = 19,
                            RoleName = "Executive"
                        },
                        new
                        {
                            RoleId = 20,
                            RoleName = "Intern"
                        });
                });

            modelBuilder.Entity("PmsApi.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("StatusId");

                    b.HasIndex("StatusName")
                        .IsUnique();

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "In Attesa"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "In Corso"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Completato"
                        });
                });

            modelBuilder.Entity("PmsApi.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssignedUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TaskId")
                        .HasName("PRIMARY");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            AssignedUserId = 1,
                            CreatedDate = new DateOnly(2021, 1, 1),
                            Description = "Descrizione Task 1",
                            DueDate = new DateOnly(2021, 6, 30),
                            PriorityId = 1,
                            ProjectId = 1,
                            StatusId = 1,
                            Title = "Task 1"
                        },
                        new
                        {
                            TaskId = 2,
                            AssignedUserId = 2,
                            CreatedDate = new DateOnly(2021, 2, 1),
                            Description = "Descrizione Task 2",
                            DueDate = new DateOnly(2021, 7, 30),
                            PriorityId = 2,
                            ProjectId = 2,
                            StatusId = 2,
                            Title = "Task 2"
                        },
                        new
                        {
                            TaskId = 3,
                            AssignedUserId = 3,
                            CreatedDate = new DateOnly(2021, 3, 1),
                            Description = "Descrizione Task 3",
                            DueDate = new DateOnly(2021, 8, 30),
                            PriorityId = 3,
                            ProjectId = 3,
                            StatusId = 3,
                            Title = "Task 3"
                        });
                });

            modelBuilder.Entity("PmsApi.Models.TaskAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("blob");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAttachments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "Attachment1.pdf",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 2,
                            FileName = "Attachment2.pdf",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 3,
                            FileName = "Attachment3.pdf",
                            TaskId = 2
                        },
                        new
                        {
                            Id = 4,
                            FileName = "Attachment4.pdf",
                            TaskId = 2
                        });
                });

            modelBuilder.Entity("PmsApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "emma.stone@mail.com",
                            FirstName = "Emma",
                            LastName = "Stone",
                            Password = "pass123",
                            RoleId = 1,
                            Username = "user1"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "liam.smith@mail.com",
                            FirstName = "Liam",
                            LastName = "Smith",
                            Password = "pass123",
                            RoleId = 2,
                            Username = "user2"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "olivia.jones@mail.com",
                            FirstName = "Olivia",
                            LastName = "Jones",
                            Password = "pass123",
                            RoleId = 3,
                            Username = "user3"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "noah.brown@mail.com",
                            FirstName = "Noah",
                            LastName = "Brown",
                            Password = "pass123",
                            RoleId = 4,
                            Username = "user4"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "jacob.williams@mail.com",
                            FirstName = "Jacob",
                            LastName = "Williams",
                            Password = "pass123",
                            RoleId = 5,
                            Username = "user5"
                        });
                });

            modelBuilder.Entity("PmsApi.Models.Project", b =>
                {
                    b.HasOne("PmsApi.Models.ProjectCategory", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PmsApi.Models.User", "Manager")
                        .WithMany("Projects")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("PmsApi.Models.Task", b =>
                {
                    b.HasOne("PmsApi.Models.User", "AssignedUser")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PmsApi.Models.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PmsApi.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PmsApi.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("PmsApi.Models.TaskAttachment", b =>
                {
                    b.HasOne("PmsApi.Models.Task", "Task")
                        .WithMany("TaskAttachments")
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("PmsApi.Models.User", b =>
                {
                    b.HasOne("PmsApi.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PmsApi.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("PmsApi.Models.ProjectCategory", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PmsApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PmsApi.Models.Task", b =>
                {
                    b.Navigation("TaskAttachments");
                });

            modelBuilder.Entity("PmsApi.Models.User", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
