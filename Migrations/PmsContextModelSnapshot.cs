// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PmsApi.DataContexts;

#nullable disable

namespace PmsApi.Migrations
{
    [DbContext(typeof(PmsContext))]
    partial class PmsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PmsApi.Models.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("PriorityId")
                        .HasName("PRIMARY");

                    b.HasIndex("PriorityName")
                        .IsUnique();

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            PriorityId = 1,
                            PriorityName = "Alta"
                        },
                        new
                        {
                            PriorityId = 2,
                            PriorityName = "Media"
                        },
                        new
                        {
                            PriorityId = 3,
                            PriorityName = "Bassa"
                        },
                        new
                        {
                            PriorityId = 4,
                            PriorityName = "Urgente"
                        });
                });

            modelBuilder.Entity("PmsApi.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ProjectId")
                        .HasName("PRIMARY");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProjectName")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PmsApi.Models.ProjectCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ProjectCategory");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Software Development"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Web Development"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Database Systems"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "System Integration"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Testing"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Maintenance"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Research and Development"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "IT Support"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Marketing Campaigns"
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Product Launch"
                        },
                        new
                        {
                            CategoryId = 11,
                            CategoryName = "Event Management"
                        },
                        new
                        {
                            CategoryId = 12,
                            CategoryName = "Content Creation"
                        },
                        new
                        {
                            CategoryId = 13,
                            CategoryName = "Social Media Management"
                        },
                        new
                        {
                            CategoryId = 14,
                            CategoryName = "Customer Relations"
                        },
                        new
                        {
                            CategoryId = 15,
                            CategoryName = "Sales Strategies"
                        },
                        new
                        {
                            CategoryId = 16,
                            CategoryName = "Market Research"
                        },
                        new
                        {
                            CategoryId = 17,
                            CategoryName = "Financial Planning"
                        },
                        new
                        {
                            CategoryId = 18,
                            CategoryName = "Budget Management"
                        },
                        new
                        {
                            CategoryId = 19,
                            CategoryName = "Legal Compliance"
                        },
                        new
                        {
                            CategoryId = 20,
                            CategoryName = "Environmental Projects"
                        });
                });

            modelBuilder.Entity("PmsApi.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("StatusId");

                    b.HasIndex("StatusName")
                        .IsUnique();

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "In Attesa"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "In Corso"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Completato"
                        });
                });

            modelBuilder.Entity("PmsApi.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AssignedUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TaskId")
                        .HasName("PRIMARY");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("PmsApi.Models.TaskAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("blob");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAttachments");
                });

            modelBuilder.Entity("PmsApi.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "eefcc751-ade7-4494-a396-3a4c12b93c9e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6ad7a109-05d2-464f-8649-171301fcd4fb",
                            Name = "Editor",
                            NormalizedName = "Editor"
                        },
                        new
                        {
                            Id = "a75d0f2b-3361-4620-af8b-6d29ecea3829",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("PmsApi.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "ef0ccdcd-ea56-4752-aece-8d0761e4fc87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ab3cc9c-0ff7-4919-9608-e4eecf98aad9",
                            Email = "emma.stone@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9a1520e-9787-4957-bab8-5d9545fbf37e",
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            FirstName = "Emma",
                            LastName = "Stone"
                        },
                        new
                        {
                            Id = "7724d07e-0785-4022-b67b-27bfa4102e3a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b3d1099-2f3d-4d07-9139-c49b8c5d6ead",
                            Email = "liam.smith@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6d44e19-d1f7-4f12-88e7-6a8b4f4769e2",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            FirstName = "Liam",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = "40abac7e-5f79-4a3a-8093-7ae38d7cbfbf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fd5a088-dac9-4874-bf1c-0b5008762c74",
                            Email = "olivia.jones@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afeae931-10a7-46be-8428-7f0800b0d497",
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            FirstName = "Olivia",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = "151634d1-7226-4205-939a-bd6ffb2134f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2c00cd8-2bd9-4f92-b801-93ef2c865104",
                            Email = "noah.brown@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20d66fec-ab83-4a45-8165-2d07d609f2ec",
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            FirstName = "Noah",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = "f788a89f-9198-4738-b238-66e9fa563ee5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c7e4f51-d728-4222-b9d7-1af3c292e9e4",
                            Email = "jacob.williams@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5ae135f-7de9-4d56-bae8-e9ff6c1d373b",
                            TwoFactorEnabled = false,
                            UserName = "user5",
                            FirstName = "Jacob",
                            LastName = "Williams"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PmsApi.Models.Project", b =>
                {
                    b.HasOne("PmsApi.Models.ProjectCategory", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PmsApi.Models.User", "Manager")
                        .WithMany("Projects")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("PmsApi.Models.Task", b =>
                {
                    b.HasOne("PmsApi.Models.User", "AssignedUser")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PmsApi.Models.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PmsApi.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PmsApi.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("PmsApi.Models.TaskAttachment", b =>
                {
                    b.HasOne("PmsApi.Models.Task", "Task")
                        .WithMany("TaskAttachments")
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("PmsApi.Models.User", b =>
                {
                    b.HasOne("PmsApi.Models.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("PmsApi.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("PmsApi.Models.ProjectCategory", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PmsApi.Models.Task", b =>
                {
                    b.Navigation("TaskAttachments");
                });

            modelBuilder.Entity("PmsApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PmsApi.Models.User", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
